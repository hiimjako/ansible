- name: Unistall nvim (packet manager)
  package:
    name:
      - neovim
    state: absent
  tags: &tags_for_nvim_tasks ["install", "nvim"]
  become: yes
  become_user: root
  when: nvim.build == False

- name: Install nvim (packet manager)
  package:
    name:
      - neovim
    state: present
  tags: *tags_for_nvim_tasks
  become: yes
  become_user: root
  when: nvim.build == False

- name: "Check if nvim clone folder ({{ nvim.clone_path }}) exists"
  stat:
    path: "{{ nvim.clone_path }}"
  register: nvim_clone_path_exists
  tags: *tags_for_nvim_tasks
  when: nvim.build == True

- name: Fail if exists
  fail:
    msg: The neovim where it will be clone already exists!.
  tags: *tags_for_nvim_tasks
  when: nvim_clone_path_exists.stat.exists and nvim.build == True

- name: "Clone Neovim in {{ nvim.clone_path }}"
  ansible.builtin.git:
    repo: "https://github.com/neovim/neovim.git"
    dest: "{{ nvim.clone_path }}"
  become_user: "{{ username }}"
  tags: *tags_for_nvim_tasks
  when: nvim.build == True

- name: Install prerequisites (ubuntu)
  apt:
    name:
      - ninja-build
      - gettext
      - libtool
      - libtool-bin
      - autoconf
      - automake
      - cmake
      - g++
      - pkg-config
      - unzip
      - curl
      - doxygen
    state: present
  become: yes
  become_user: root
  when: ansible_distribution == "Ubuntu" and nvim.build == True

- name: Install prerequisites (arch)
  community.general.pacman:
    name:
      - cmake
      - unzip
      - ninja
      - tree-sitter
      - curl
    state: present
  become: yes
  # become_user: root
  when: ansible_distribution == "Archlinux" and nvim.build == True

- name: Unistall neovim
  file:
    state: absent
    path: "{{ nvim_installation_paths }}"
  tags: *tags_for_nvim_tasks
  with_items:
    - /usr/local/bin/nvim
    - /usr/local/share/nvim/
  loop_control:
    loop_var: nvim_installation_paths
  become: yes
  become_user: root
  when: nvim.build == True

- name: Build neovim
  shell: "cd {{ nvim.clone_path }} && make CMAKE_BUILD_TYPE=RelWithDebInfo"
  tags: *tags_for_nvim_tasks
  when: nvim.build == True

- name: Install neovim
  shell: "cd {{ nvim.clone_path }} && make install"
  become: yes
  become_user: root
  tags: *tags_for_nvim_tasks
  when: nvim.build == True

- name: Remove neovim folder
  file:
    state: absent
    path: "{{ nvim.clone_path }}"
  tags: *tags_for_nvim_tasks
  # Necessario poiché la build è da sudo
  become: yes
  become_user: root
  when: nvim.build == True

- name: Install packer
  ansible.builtin.git:
    repo: "https://github.com/wbthomason/packer.nvim"
    dest: "/home/{{ username }}/.local/share/nvim/site/pack/packer/start/packer.nvim"
    depth: 1
  become_user: "{{ username }}"
  tags: *tags_for_nvim_tasks
# - name: Install Vim-Plug
#   shell: sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
#   become_user: "{{ username }}"
#
# - name: Install vim Plugins
#   shell: nvim +PlugInstall +qall
#   become: yes
#   become_user: "{{ username }}"
#
# - name: Add python support nvim
#   shell: pip3 install --user --upgrade neovim
#
- name: Install Typescript
  shell: >
     bash -c "source ~/.nvm/nvm.sh && npm i -g typescript" 
  tags: &tags_for_node_lsp_tasks ["install", "lsp"]

- name: Install Typescript server
  shell: >
    bash -c "source ~/.nvm/nvm.sh && npm i -g typescript-language-server"
  tags: *tags_for_node_lsp_tasks

- name: Install TS-Node
  shell: >
     bash -c "source ~/.nvm/nvm.sh && npm i -g ts-node" 
  tags: *tags_for_node_lsp_tasks

- name: Install eslint server
  shell: >
     bash -c "source ~/.nvm/nvm.sh && npm i -g vscode-langservers-extracted" 
  tags: *tags_for_node_lsp_tasks

- name: Install tree-sitter 
  shell: >
     bash -c "source ~/.nvm/nvm.sh && npm i -g tree-sitter tree-sitter-cli" 
  tags: *tags_for_node_lsp_tasks

- name: Install yaml server
  shell: >
     bash -c "source ~/.nvm/nvm.sh && npm i -g yaml-language-server" 
  tags: *tags_for_node_lsp_tasks

- name: Install vim server
  shell: >
     bash -c "source ~/.nvm/nvm.sh && npm i -g vim-language-server"
  tags: *tags_for_node_lsp_tasks

# https://black.readthedocs.io/en/stable/integrations/editors.html
# in case of error lunch
# rm -rf ~/.local/share/nvim/black
# install apt install python3.10-venv --> or needed python version
# - name: Install black python formatter 
#   shell: >
#      bash -c "source ~/.nvm/nvm.sh && npm i -g vim-language-server"
#   tags: *tags_for_node_lsp_tasks
