---
- name: Unistall nvim (package manager)
  package:
    name:
      - neovim
    state: absent
  tags: &tags_for_nvim_tasks ["init", "nvim"]
  become: yes
  become_user: root
  when: nvim.build == False

- name: Install nvim (package manager)
  package:
    name:
      - neovim
    state: present
  tags: *tags_for_nvim_tasks
  become: yes
  become_user: root
  when: nvim.build == False

- name: "Check if nvim clone folder ({{ nvim.clone_path }}) exists (Build)"
  stat:
    path: "{{ nvim.clone_path }}"
  register: nvim_clone_path_exists
  tags: *tags_for_nvim_tasks
  when: nvim.build == True

- name: Fail if exists
  fail:
    msg: The neovim where it will be clone already exists!.
  tags: *tags_for_nvim_tasks
  when: nvim_clone_path_exists.stat.exists and nvim.build == True

- name: "Clone Neovim in {{ nvim.clone_path }} (Build)"
  ansible.builtin.git:
    repo: "https://github.com/neovim/neovim.git"
    dest: "{{ nvim.clone_path }}"
  become_user: "{{ username }}"
  tags: *tags_for_nvim_tasks
  when: nvim.build == True

- name: Install prerequisites (ubuntu)
  apt:
    name:
      - ninja-build
      - gettext
      - libtool
      - libtool-bin
      - autoconf
      - automake
      - cmake
      - g++
      - pkg-config
      - unzip
      - curl
      - doxygen
    state: present
  become: yes
  tags: *tags_for_nvim_tasks
  become_user: root
  when: ansible_distribution == "Ubuntu" and nvim.build == True

- name: Install prerequisites (arch)
  community.general.pacman:
    name:
      - cmake
      - unzip
      - ninja
      - tree-sitter
      - curl
    state: present
  become: yes
  tags: *tags_for_nvim_tasks
  become_user: root
  when: ansible_distribution == "Archlinux" and nvim.build == True

- name: Unistall neovim
  file:
    state: absent
    path: "{{ nvim_installation_paths }}"
  tags: *tags_for_nvim_tasks
  with_items:
    - /usr/local/bin/nvim
    - /usr/local/share/nvim/
  loop_control:
    loop_var: nvim_installation_paths
  become: yes
  become_user: root
  when: nvim.build == True

- name: Build and install neovim
  shell: "cd {{ nvim.clone_path }} && make CMAKE_BUILD_TYPE={{ nvim.build_type }} && sudo make install"
  become: yes
  become_user: root
  tags: *tags_for_nvim_tasks
  when: nvim.build == True

- name: Remove neovim folder
  file:
    state: absent
    path: "{{ nvim.clone_path }}"
  tags: *tags_for_nvim_tasks
  # Necessario poiché la build è da sudo
  become: yes
  become_user: root
  when: nvim.build == True

- name: Install libs for checkhealth
  package:
    name:
      - xclip
    state: present
  become: yes
  become_user: root
  tags: *tags_for_nvim_tasks

- name: Set node version manager path
  set_fact:
    nvm_path: "/home/{{ username }}/.local/share/fnm/fnm"
  tags: &tags_for_node_lsp_tasks ["init", "lsp", "nvim", "nodejs"]

- name: Install Typescript
  shell: "eval `{{ nvm_path }} env` && npm i -g typescript"
  tags: *tags_for_node_lsp_tasks

- name: Install Typescript server
  shell: "eval `{{ nvm_path }} env` && npm i -g typescript-language-server"
  tags: *tags_for_node_lsp_tasks

- name: Install neovim npm
  shell: "eval `{{ nvm_path }} env` && npm i -g neovim"
  tags: *tags_for_node_lsp_tasks

- name: Install TS-Node
  shell: "eval `{{ nvm_path }} env` && npm i -g ts-node"
  tags: *tags_for_node_lsp_tasks

- name: Install eslint server
  shell: "eval `{{ nvm_path }} env` && npm i -g vscode-langservers-extracted"
  tags: *tags_for_node_lsp_tasks

- name: Install tree-sitter
  shell: "eval `{{ nvm_path }} env` && npm i -g tree-sitter tree-sitter-cli"
  tags: *tags_for_node_lsp_tasks

- name: Install yaml server
  shell: "eval `{{ nvm_path }} env` && npm i -g yaml-language-server"
  tags: *tags_for_node_lsp_tasks

- name: Install vim server
  shell: "eval `{{ nvm_path }} env` && npm i -g vim-language-server"
  tags: *tags_for_node_lsp_tasks

